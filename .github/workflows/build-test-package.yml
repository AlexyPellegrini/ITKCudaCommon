name: Build, test, package

on: [push,pull_request]

jobs:
  build-test-cxx:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      matrix:
        os: [self-hosted]
        include:
          - os: self-hosted
            c-compiler: "gcc"
            cxx-compiler: "g++"
            itk-git-tag: "d6acfd26bfcdec606d605beb1301bddfb17c05a6"
            cmake-build-type: "MinSizeRel"

    steps:
    - uses: actions/checkout@v2

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install ninja

    - name: Get specific version of CMake, Ninja
      uses: lukka/get-cmake@v3.18.3

    - name: self-hosted cleanup
      shell: bash
      run: |
        rm -fr ../ITK
        rm -fr ../ITK-build
        rm -fr ../build

    - name: Download ITK
      run: |
        cd ..
        git clone https://github.com/InsightSoftwareConsortium/ITK.git
        cd ITK
        git checkout ${{ matrix.itk-git-tag }}

    - name: Build ITK
      run: |
        cd ..
        mkdir ITK-build
        cd ITK-build
        cmake -DCMAKE_C_COMPILER:FILEPATH="${{ matrix.c-compiler }}" -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_CXX_COMPILER="${{ matrix.cxx-compiler }}" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.cmake-build-type }} -DBUILD_TESTING:BOOL=OFF -GNinja ../ITK
        ninja

    - name: Fetch CTest driver script
      run: |
        curl -L https://raw.githubusercontent.com/InsightSoftwareConsortium/ITK/dashboard/itk_common.cmake -O

    - name: Configure CTest script
      shell: bash
      run: |
        operating_system="${{ matrix.os }}"
        cat > dashboard.cmake << EOF
        set(CTEST_SITE "GitHubActions")
        file(TO_CMAKE_PATH "\$ENV{GITHUB_WORKSPACE}/.." CTEST_DASHBOARD_ROOT)
        file(TO_CMAKE_PATH "\$ENV{GITHUB_WORKSPACE}/" CTEST_SOURCE_DIRECTORY)
        file(TO_CMAKE_PATH "\$ENV{GITHUB_WORKSPACE}/../build" CTEST_BINARY_DIRECTORY)
        set(dashboard_source_name "${GITHUB_REPOSITORY}")
        if(ENV{GITHUB_REF} MATCHES "master")
          set(branch "-master")
          set(dashboard_model "Continuous")
        else()
          set(branch "-${GITHUB_REF}")
          set(dashboard_model "Experimental")
        endif()
        set(CTEST_BUILD_NAME "${GITHUB_REPOSITORY}-${operating_system}-\${branch}")
        set(CTEST_UPDATE_VERSION_ONLY 1)
        set(CTEST_TEST_ARGS \${CTEST_TEST_ARGS} PARALLEL_LEVEL \${PARALLEL_LEVEL})
        set(CTEST_BUILD_CONFIGURATION "Release")
        set(CTEST_CMAKE_GENERATOR "Ninja")
        set(CTEST_CUSTOM_WARNING_EXCEPTION
          \${CTEST_CUSTOM_WARNING_EXCEPTION}
          # macOS Azure VM Warning
          "ld: warning: text-based stub file"
          )
        set(dashboard_no_clean 1)
        set(ENV{CC} ${{ matrix.c-compiler }})
        set(ENV{CXX} ${{ matrix.cxx-compiler }})
        if(WIN32)
          set(ENV{PATH} "\${CTEST_DASHBOARD_ROOT}/ITK-build/bin;\$ENV{PATH}")
        endif()
        set(dashboard_cache "
        ITK_DIR:PATH=\${CTEST_DASHBOARD_ROOT}/ITK-build
        BUILD_TESTING:BOOL=ON
        ")
        string(TIMESTAMP build_date "%Y-%m-%d")
        message("CDash Build Identifier: \${build_date} \${CTEST_BUILD_NAME}")
        message("CTEST_SITE = \${CTEST_SITE}")
        include(\${CTEST_SCRIPT_DIRECTORY}/itk_common.cmake)
        EOF
        cat dashboard.cmake

    - name: Build and test
      run: |
        ctest --output-on-failure -j 2 -V -S dashboard.cmake

  build-linux-python-packages:
    runs-on: self-hosted-linux
    strategy:
      max-parallel: 2
      matrix:
        python-version: [37, 38, 39, 310]
        include:
          - itk-python-git-tag: "v5.3rc04"

    steps:
    - uses: actions/checkout@v2

    - name: 'Fetch build script'
      run: |
        curl -L https://raw.githubusercontent.com/InsightSoftwareConsortium/ITKPythonPackage/master/scripts/dockcross-manylinux-download-cache-and-build-module-wheels.sh -O
        chmod u+x dockcross-manylinux-download-cache-and-build-module-wheels.sh
    - name: 'Build 🐍 Python 📦 package'
      run: |
        export ITK_PACKAGE_VERSION=${{ matrix.itk-python-git-tag }}
        export LD_LIBRARY_PATH="/home/srit/Downloads/cuda116:/home/srit/Downloads/cuda116/targets/x86_64-linux/lib:/home/srit/Downloads/cuda116/lib64/stubs"
        ./dockcross-manylinux-download-cache-and-build-module-wheels.sh -c "-DCUDAToolkit_ROOT=/usr/lib64/cuda116 -DCMAKE_CUDA_COMPILER=/usr/lib64/cuda116/bin/nvcc" -x "libcuda.so;libcuda.so.1;libcudart.so;libcudart.so.11.0;libcublas.so;libcublas.so.11;libcublasLt.so;libcublasLt.so.11;libcufft.so;libcufft.so.10" cp${{ matrix.python-version }}
    - name: Publish Python package as GitHub Artifact
      uses: actions/upload-artifact@v1
      with:
        name: LinuxWheel${{ matrix.python-version }}-cuda116
        path: dist
